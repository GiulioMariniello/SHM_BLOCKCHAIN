// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/AccessControl.sol";

interface IOracle {
    function getSensorData(uint sensorId) external view returns (
        uint samplingFrequency, 
        uint maxValue, 
        uint minValue, 
        uint anomalyCount, 
        uint startTime, 
        uint endTime, 
        uint autoDiagValue, 
        bytes32 dataHash
    );
}

contract StructuralMonitoring is AccessControl {
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");

    struct SensorParameters {
        uint max;
        uint min;
        uint maxError;
        uint sampleCount;
        uint maxAutoDiag;
        uint minAutoDiag;
    }

    mapping(uint => SensorParameters) public sensorParameters;

    // Registrazione delle anomalie con hash
    struct DataRecord {
        bytes32 dataHash;
        bool hasAnomaly;
    }

    mapping(uint => DataRecord) public dataRecords;

    uint public lastTimestamp;
    IOracle public oracle;

    event DataValidated(bytes32 indexed dataHash, bool hasAnomaly, uint indexed timestamp);

    constructor(address oracleAddress) {
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(ADMIN_ROLE, msg.sender);
        oracle = IOracle(oracleAddress);
    }

    function initializeSensorParameters(
        uint sensorId,
        uint max,
        uint min,
        uint maxError,
        uint sampleCount,
        uint maxAutoDiag,
        uint minAutoDiag
    ) public {
        require(hasRole(ADMIN_ROLE, msg.sender), "Only admin can initialize parameters");
        sensorParameters[sensorId] = SensorParameters(max, min, maxError, sampleCount, maxAutoDiag, minAutoDiag);
    }

    function validateFromOracle(uint sensorId) public {
        (
            uint samplingFrequency, 
            uint maxValue, 
            uint minValue, 
            uint anomalyCount, 
            uint startTime, 
            uint endTime, 
            uint autoDiagValue, 
            bytes32 dataHash
        ) = oracle.getSensorData(sensorId);

        bool hasAnomaly = false;

        // Controllo di anomalia
        if (startTime <= lastTimestamp) {
            hasAnomaly = true;
        }

        if (
            maxValue > sensorParameters[sensorId].max || 
            minValue < sensorParameters[sensorId].min || 
            anomalyCount > sensorParameters[sensorId].maxError || 
            (samplingFrequency * 600) != sensorParameters[sensorId].sampleCount || 
            autoDiagValue < sensorParameters[sensorId].minAutoDiag || 
            autoDiagValue > sensorParameters[sensorId].maxAutoDiag
        ) {
            hasAnomaly = true;
        }

        // Salva sempre l'hash con lo stato dell'anomalia
        dataRecords[sensorId] = DataRecord(dataHash, hasAnomaly);
        
        // Emetti un evento per registrare l'operazione
        emit DataValidated(dataHash, hasAnomaly, endTime);

        // Aggiorna il timestamp solo se non ci sono anomalie
        if (!hasAnomaly) {
            lastTimestamp = endTime;
        }
    }
}
